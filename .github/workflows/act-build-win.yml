# 2024-02-15 13:00
name: "Build keepassxc - Windows"

on:
#  push:
#    branches: [ 'develop', 'release/2.7.x' ]
#  pull_request:
#    # The branches below must be a subset of the branches above
#    branches: [ 'develop' ]
#  schedule:
#    - cron: '5 16 * * 3'
  workflow_dispatch:
    inputs:
      archive-all:
        description: archive-all
        type: boolean
        default: false
        required: true

env:
  TAG_NAME:     'keepassxc'
  TAG_NAME_ALL: 'keepassxc'
  PROG_NAME:    'keepassxc'
  PROG_VERSION: 'v1.1.1'
  DRAFT:        true
  GUI:          'win'
  VCPKG_COMMIT_ID:      "8eb57355a4ffb410a2e94c07b4dca2dffbee8e50"
  VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"
  
jobs:
  build:
    name: Build
    runs-on: 'windows-2019'
    timeout-minutes: 360
    permissions:
      actions: read
      contents: write
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'cpp' ]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]
        # Use only 'java' to analyze code written in Java, Kotlin or both
        # Use only 'javascript' to analyze code written in JavaScript, TypeScript or both
        # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support

    steps:
    - name: Checkout repository
      uses: deep-soft/checkout@v4

    - name: Setup vcpkg with Github Actions binary cache
      continue-on-error: true
      uses: deep-soft/run-vcpkg@v11
      with:
        #vcpkgDirectory: C:\vcpkg
        vcpkgGitCommitId: ${{ env.VCPKG_COMMIT_ID }}

    - name: Install vcpkg dependencies and build
      continue-on-error: true
      shell: bash
      run: |
        $VCPKG_ROOT/vcpkg install argon2 openvpn3 botan minizip qt5 qt5-svg qt5-tools qt5-imageformats qt5-translations readline zlib libqrencode --triplet=x64-windows
        #$VCPKG_ROOT/vcpkg-ports install pkcs11-helper
        #$VCPKG_ROOT/vcpkg --overlay-ports=<openvpn>\contrib\vcpkg-ports install pkcs11-helper
        # $VCPKG_ROOT/vcpkg install libvpx:x64-windows-static libyuv:x64-windows-static opus:x64-windows-static aom:x64-windows-static
        # $VCPKG_ROOT/vcpkg install botan --x-install-root="$VCPKG_ROOT/installed"
        #
        # $VCPKG_ROOT/vcpkg install botan 
        # bash release-tool build --version develop
        mkdir build && cd build
        cmake -DCMAKE_TOOLCHAIN_FILE=$VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake -DWITH_XC_ALL=ON -DWITH_XC_YUBIKEY=OFF -DKEEPASSXC_BUILD_TYPE=Release ..

    - if: matrix.language == 'cpp'
      name: release-tool build
      continue-on-error: true
      shell: bash
      run: |
        # mkdir build && cd build
        # moved to name: Install vcpkg dependencies and build
        # bash release-tool build --version develop

    - name: Archive Release ALL
      if: ${{ inputs.archive-all }}
      continue-on-error: true
      uses: deep-soft/zip-release@v2
      with:
        type: 'zip'
        filename: '${{ env.PROG_NAME }}-ALL.zip'
        directory: './'
        # archive name is ${{ env.ZIP_RELEASE_ARCHIVE }}

    - name: Upload artifact
      if: ${{ inputs.archive-all }}
      continue-on-error: true
      uses: deep-soft/upload-artifact@v4
      with:
        name: ${{ env.TAG_NAME_ALL }}-${{ env.GUI }}
        path: |
          ${{ env.ZIP_RELEASE_ARCHIVE }}
        # if-no-files-found: error

    - name: Publish Release
      if: ${{ inputs.archive-all }}
      continue-on-error: true
      uses: deep-soft/action-gh-release@v2.1
      with:
        draft: ${{ env.DRAFT }}
        tag_name: ${{ env.TAG_NAME_ALL }}-${{ env.GUI }}
        files: |
          ${{ env.ZIP_RELEASE_ARCHIVE }}
